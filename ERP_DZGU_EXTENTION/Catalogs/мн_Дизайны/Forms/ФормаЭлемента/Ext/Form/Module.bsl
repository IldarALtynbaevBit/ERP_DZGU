//***************ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ********************
#Область Обработчики

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ИзменениеТЗ = Истина;
		Объект.ДатаДизайна = ТекущаяДата();
		Объект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		Объект.Менеджер      = Объект.Ответственный;
		
	Иначе
		
		ПроверкаГодностиКомплектаФорм(); //РАСЧИТАТЬ ГОТОВНОСТЬ КОМПЛЕКТА КЛИШЕ К РАБОТЕ
		
		//Обновить нормативы 
		Если Объект.КолвоКлишеЛицо > 0 Тогда
			РасчетРасходаКраскиЛицо();			
		КонецЕсли;
		Если Объект.КолвоКлишеОборот > 0 Тогда
			РасчетРасходаКраскиОборот();
		КонецЕсли;
		
		МетражПриладки = ПолучитьМетражПриладкиСервер(Объект.ФорматПечати,Объект.КолвоКлишеЛицо,Объект.УпрощеннаяПриладка);
		МетражПриладкиОборот = ПолучитьМетражПриладкиСервер(Объект.ФорматПечати,Объект.КолвоКлишеОборот,Объект.УпрощеннаяПриладка);
				
		ЗаполнитьКолонкуСухойОстаток();   //Загрузить колонку сухой остаток
		
		//Если Объект.ФорматПечати = ПредопределенноеЗначение("Перечисление.ФорматПечати.Omet") //для старых дизайнов заполнить поле фактический размер макета
		//	И Объект.ФактическийРазмерМакета = "" Тогда
		//	Объект.ФактическийРазмерМакета = РасчетОтклоненияРазмераМакетаСервер(Объект.Вал,Объект.ШагПечати, Объект.КоличествоНаРапорте);	
		//КонецЕсли;
	КонецЕсли;
	
	ДоступныеФормы.Параметры.УстановитьЗначениеПараметра("ТекДата",НачалоДня(ТекущаяДата()));
	
	ТолькоДоступныеВалы = Истина;
	ФлагТолькоГодные = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)	
	
	ЗаполнитьСписокОпераций();	
	ВидимостьМетки();
	УстановитьВидимостьЭлементов();	
	УстановитьКартинкуЛицаОборота();
	УстановитьКартинкуРасположениеМетки();
	УстановитьКартинкуТекстПослеПечати();
	
	УстановитьКартинкуСхемыНамотки();	
	УстановитьКартинкуСхемаНаклейкиНаГильзу();
	УстановитьКартинкуСхемаНаклейкиМетка();

	ЗаполнитьДлинуПечатиВала();	
	//РасчетОтклоненияРазмераМакета();	
	УстановитьОтборПечатныхФорм();			
	УстановитьДоступностьЭлементов();
	
	Если Объект.Ссылка.Пустая() Тогда
		Элементы.КомандаПерезаполнитьИД.Доступность = Ложь;	   
	Иначе	
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
		
	ТекущийОбъект.Наименование = ТекущийОбъект.Код+" от "+Формат(ТекущийОбъект.ДатаДизайна,"ДФ=dd.MM.yy")+" "
		+ТекущийОбъект.НазваниеДизайна;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ИзменениеТЗ Тогда
		
		ОповеститьОбИзмененииТЗ();
		
		СохранитьВерсиюТЗ();
		
		ИзменениеТЗ = Ложь;
		
		УстановитьДоступностьЭлементов();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматПечатиПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементов();
	
	//ПОДОБРАТЬ ВАЛ
	Если ЗначениеЗаполнено(Объект.Вал) Тогда
		КодВозврата = Вопрос("Печатный вал требуется заменить, будет произведен автоматический подбор! Вы согласны?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да,);
		Если КодВозврата = КодВозвратаДиалога.Да Тогда
			ШагПечатиПриИзменении(Неопределено);	
		Иначе 
			Объект.Вал = ПредопределенноеЗначение("Справочник.мн_Валы.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	РасчетОтклоненияРазмераМакета();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеТЗПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ШиринаГППриИзменении(Элемент)
	
	//РасчитатьШиринуМатериала();
	//
	//Объект.ШиринаПечати = Объект.ШиринаГП * Объект.КоличествоРучьев;
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоРучьевПриИзменении(Элемент)

	//РасчитатьШиринуМатериала();
	//
	//Объект.ШиринаПечати = Объект.ШиринаГП * Объект.КоличествоРучьев;

КонецПроцедуры

&НаКлиенте
Процедура ПриводныеЭлементыПриИзменении(Элемент)
//	РасчитатьШиринуМатериала();
КонецПроцедуры

&НаКлиенте
Процедура КоличествоНаРапортеПриИзменении(Элемент)
	
	Если Объект.ФорматПечати = ПредопределенноеЗначение("Перечисление.ФорматПечати.Comexi") Тогда
		ПодобратьРапортВала(Объект.КоличествоНаРапорте);
	ИначеЕсли Объект.ФорматПечати = ПредопределенноеЗначение("Перечисление.ФорматПечати.Omet") Тогда 
		ПодобратьРапортВалаУзкорулонка(Объект.КоличествоНаРапорте);
	КонецЕсли;
	
	ЗаполнитьДлинуПечатиВала();
	РасчетОтклоненияРазмераМакета();
	
КонецПроцедуры

&НаКлиенте
Процедура ШагПечатиПриИзменении(Элемент)
	
	Если Объект.ФорматПечати = ПредопределенноеЗначение("Перечисление.ФорматПечати.Comexi") Тогда
		ПодобратьРапортВала();
	ИначеЕсли Объект.ФорматПечати = ПредопределенноеЗначение("Перечисление.ФорматПечати.Omet") Тогда
		ПодобратьРапортВалаУзкорулонка();
		РасчетОтклоненияРазмераМакета();		
	КонецЕсли;
	
	ЗаполнитьДлинуПечатиВала();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодобратьВал(Команда)
	
	Если Объект.ФорматПечати = ПредопределенноеЗначение("Перечисление.ФорматПечати.Commexi") Тогда
		ПодобратьРапортВала();
	ИначеЕсли Объект.ФорматПечати = ПредопределенноеЗначение("Перечисление.ФорматПечати.Omet") Тогда
		ПодобратьРапортВалаУзкорулонка();
		РасчетОтклоненияРазмераМакета();		
	КонецЕсли;
	
	ЗаполнитьДлинуПечатиВала();

КонецПроцедуры

// Процедура находит подходящий печатный вал из доступных для дизайнов OMET
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ПодобратьРапортВалаУзкорулонка(КоличествоНаРапорте = Неопределено)

	Если НЕ ЗначениеЗаполнено(Объект.ШагПечати) Тогда
		Объект.Вал =Справочники.мн_Валы.ПустаяСсылка();
		Объект.КоличествоНаРапорте = 1;				
		Возврат;
	КонецЕсли;
	//!!! ИЗ ВСЕХ ДОСТУПНЫХ ВАРИАНТОВ ВАЛОВ
	//!!! НАХОЖУ ОТКЛОНЕНИЕ РАПОРТА ВАЛА ОТ ШАГА ПЕЧАТИ 
	//!!! СОРТИРУЮ РЕЗУЛЬТАТ ПО ВОЗРАСТАНИЮ ОТКЛОНЕНИЯ
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мн_Валы.Ссылка,
		|	мн_Валы.ДлинаОкружности,
		|	&ШагПечати,
		|	1 КАК КоличествоНаРапорте,
		|	мн_Валы.НеДоступен
		|ПОМЕСТИТЬ РапортыОттиски
		|ИЗ
		|	Справочник.мн_Валы КАК мн_Валы
		|ГДЕ
		|	мн_Валы.ФорматПечати = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.ФорматПечати.Omet)
		|	И НЕ мн_Валы.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	мн_Валы.Ссылка,
		|	мн_Валы.ДлинаОкружности,
		|	&ШагПечати,
		|	2,
		|	мн_Валы.НеДоступен
		|ИЗ
		|	Справочник.мн_Валы КАК мн_Валы
		|ГДЕ
		|	мн_Валы.ФорматПечати = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.ФорматПечати.Omet)
		|	И НЕ мн_Валы.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	мн_Валы.Ссылка,
		|	мн_Валы.ДлинаОкружности,
		|	&ШагПечати,
		|	3,
		|	мн_Валы.НеДоступен
		|ИЗ
		|	Справочник.мн_Валы КАК мн_Валы
		|ГДЕ
		|	мн_Валы.ФорматПечати = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.ФорматПечати.Omet)
		|	И НЕ мн_Валы.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	мн_Валы.Ссылка,
		|	мн_Валы.ДлинаОкружности,
		|	&ШагПечати,
		|	4,
		|	мн_Валы.НеДоступен
		|ИЗ
		|	Справочник.мн_Валы КАК мн_Валы
		|ГДЕ
		|	мн_Валы.ФорматПечати = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.ФорматПечати.Omet)
		|	И НЕ мн_Валы.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	мн_Валы.Ссылка,
		|	мн_Валы.ДлинаОкружности,
		|	&ШагПечати,
		|	5,
		|	мн_Валы.НеДоступен
		|ИЗ
		|	Справочник.мн_Валы КАК мн_Валы
		|ГДЕ
		|	мн_Валы.ФорматПечати = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.ФорматПечати.Omet)
		|	И НЕ мн_Валы.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	мн_Валы.Ссылка,
		|	мн_Валы.ДлинаОкружности,
		|	&ШагПечати,
		|	6,
		|	мн_Валы.НеДоступен
		|ИЗ
		|	Справочник.мн_Валы КАК мн_Валы
		|ГДЕ
		|	мн_Валы.ФорматПечати = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.ФорматПечати.Omet)
		|	И НЕ мн_Валы.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	мн_Валы.Ссылка,
		|	мн_Валы.ДлинаОкружности,
		|	&ШагПечати,
		|	7,
		|	мн_Валы.НеДоступен
		|ИЗ
		|	Справочник.мн_Валы КАК мн_Валы
		|ГДЕ
		|	мн_Валы.ФорматПечати = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.ФорматПечати.Omet)
		|	И НЕ мн_Валы.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	мн_Валы.Ссылка,
		|	мн_Валы.ДлинаОкружности,
		|	&ШагПечати,
		|	8,
		|	мн_Валы.НеДоступен
		|ИЗ
		|	Справочник.мн_Валы КАК мн_Валы
		|ГДЕ
		|	мн_Валы.ФорматПечати = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.ФорматПечати.Omet)
		|	И НЕ мн_Валы.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	мн_Валы.Ссылка,
		|	мн_Валы.ДлинаОкружности,
		|	&ШагПечати,
		|	9,
		|	мн_Валы.НеДоступен
		|ИЗ
		|	Справочник.мн_Валы КАК мн_Валы
		|ГДЕ
		|	мн_Валы.ФорматПечати = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.ФорматПечати.Omet)
		|	И НЕ мн_Валы.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	мн_Валы.Ссылка,
		|	мн_Валы.ДлинаОкружности,
		|	&ШагПечати,
		|	10,
		|	мн_Валы.НеДоступен
		|ИЗ
		|	Справочник.мн_Валы КАК мн_Валы
		|ГДЕ
		|	мн_Валы.ФорматПечати = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.ФорматПечати.Omet)
		|	И НЕ мн_Валы.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РапортыОттиски.Ссылка,
		|	РапортыОттиски.ШагПечати,
		|	РапортыОттиски.КоличествоНаРапорте,
		|	РапортыОттиски.ДлинаОкружности,
		|	(РапортыОттиски.ДлинаОкружности - РапортыОттиски.ШагПечати * РапортыОттиски.КоличествоНаРапорте) / РапортыОттиски.КоличествоНаРапорте КАК Отклонение,
		|	ВЫБОР
		|		КОГДА РапортыОттиски.ДлинаОкружности - РапортыОттиски.ШагПечати * РапортыОттиски.КоличествоНаРапорте > 0
		|			ТОГДА (РапортыОттиски.ДлинаОкружности - РапортыОттиски.ШагПечати * РапортыОттиски.КоличествоНаРапорте) / РапортыОттиски.КоличествоНаРапорте
		|		ИНАЧЕ (РапортыОттиски.ДлинаОкружности - РапортыОттиски.ШагПечати * РапортыОттиски.КоличествоНаРапорте) * -1 / РапортыОттиски.КоличествоНаРапорте
		|	КОНЕЦ КАК МодульОтклонения,
		|	РапортыОттиски.НеДоступен
		|ПОМЕСТИТЬ ОтклонениеРазмеровМакета
		|ИЗ
		|	РапортыОттиски КАК РапортыОттиски
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтклонениеРазмеровМакета.Ссылка,
		|	ОтклонениеРазмеровМакета.ШагПечати,
		|	ОтклонениеРазмеровМакета.КоличествоНаРапорте,
		|	ОтклонениеРазмеровМакета.ДлинаОкружности,
		|	ОтклонениеРазмеровМакета.Отклонение КАК Отклонение
		|ИЗ
		|	ОтклонениеРазмеровМакета КАК ОтклонениеРазмеровМакета
		|ГДЕ
		|	ОтклонениеРазмеровМакета.МодульОтклонения < ОтклонениеРазмеровМакета.ШагПечати
		|	И НЕ ОтклонениеРазмеровМакета.НеДоступен" + ?(КоличествоНаРапорте = Неопределено, "", " И ОтклонениеРазмеровМакета.КоличествоНаРапорте = &КоличествоНаРапорте") + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОтклонениеРазмеровМакета.МодульОтклонения";
	
	Запрос.УстановитьПараметр("ШагПечати", Объект.ШагПечати);
	Запрос.УстановитьПараметр("КоличествоНаРапорте", КоличествоНаРапорте);
	
	Если НЕ ТолькоДоступныеВалы Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И НЕ ОтклонениеРазмеровМакета.НеДоступен","");	
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи.Следующий();
		Объект.Вал = ВыборкаДетальныеЗаписи.Ссылка;
		Объект.КоличествоНаРапорте = ВыборкаДетальныеЗаписи.КоличествоНаРапорте;
	Иначе 
		Объект.Вал =Справочники.мн_Валы.ПустаяСсылка();
		Объект.КоличествоНаРапорте = 1;		
	КонецЕсли;	
	
КонецПроцедуры // ПодобратьРапортУзкорулонка()

&НаКлиенте
Процедура ПодборКлише(Команда)

	ПараметрыОткрытия = Новый Структура;	
	ПараметрыОткрытия.Вставить("МножественныйВыбор",Истина);	
	ПараметрыОткрытия.Вставить("РежимВыбора",Истина);
	ПараметрыОткрытия.Вставить("ЗакрыватьПриВыборе",Ложь);		
	ПараметрыОткрытия.Вставить("Владелец",Объект.Владелец);	
	
	ОткрытьФормуМодально("Справочник.мн_ЦветаКлишеДизайнов.Форма.ФормаВыбораДерево",ПараметрыОткрытия,Элементы.КлишеЛицо);	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСхемуНаклейкиНамоткиТекст()

	//УстановитьРасположениеМетки();
	УстановитьСхемуНаклейкиМетки();
	
	ТекстПослеПечати();	
	
	УстановитьСхемуНаклейки();
	
	УстановитьКартинкуСхемыНамотки();
	
КонецПроцедуры // УстановитьСхемуНаклейкиНамоткиТекст()

&НаКлиенте
Процедура ТипПечатиПриИзменении(Элемент)
	
	УстановитьСхемуНаклейкиНамоткиТекст();
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицоОборотПриИзменении(Элемент)
	
	УстановитьКартинкуЛицаОборота();
	
	ТекстПослеПечати();	
	
КонецПроцедуры

&НаКлиенте
Процедура РасположениеМеткиПриИзменении(Элемент)
	
	УстановитьКартинкуРасположениеМетки();
	
	УстановитьСхемуНаклейкиМетки();
	
КонецПроцедуры

&НаКлиенте
Процедура СхемаНамоткиПриИзменении(Элемент)
	
	Если Объект.СхемаНамотки = ПредопределенноеЗначение("Перечисление.мн_СхемаНамотки.СхемаНамотки5") 
		ИЛИ  Объект.СхемаНамотки = ПредопределенноеЗначение("Перечисление.мн_СхемаНамотки.СхемаНамотки6") 
		ИЛИ  Объект.СхемаНамотки = ПредопределенноеЗначение("Перечисление.мн_СхемаНамотки.СхемаНамотки7") 
		ИЛИ  Объект.СхемаНамотки = ПредопределенноеЗначение("Перечисление.мн_СхемаНамотки.СхемаНамотки8") 
		ИЛИ  Объект.СхемаНамотки = ПредопределенноеЗначение("Перечисление.мн_СхемаНамотки.СхемаНамотки9") 
		ИЛИ  Объект.СхемаНамотки = ПредопределенноеЗначение("Перечисление.мн_СхемаНамотки.СхемаНамотки10") 
		ИЛИ  Объект.СхемаНамотки = ПредопределенноеЗначение("Перечисление.мн_СхемаНамотки.СхемаНамотки11") 
		ИЛИ  Объект.СхемаНамотки = ПредопределенноеЗначение("Перечисление.мн_СхемаНамотки.СхемаНамотки12")
		ИЛИ  Объект.СхемаНамотки = ПредопределенноеЗначение("Перечисление.мн_СхемаНамотки.СхемаНамотки13") 
		ИЛИ  Объект.СхемаНамотки = ПредопределенноеЗначение("Перечисление.мн_СхемаНамотки.СхемаНамотки14") 
		ИЛИ  Объект.СхемаНамотки = ПредопределенноеЗначение("Перечисление.мн_СхемаНамотки.СхемаНамотки15")
		ИЛИ  Объект.СхемаНамотки = ПредопределенноеЗначение("Перечисление.мн_СхемаНамотки.СхемаНамотки16") Тогда
		
		Объект.СхемаНамотки = ПредопределенноеЗначение("Перечисление.мн_СхемаНамотки.НеЗадано");
		Предупреждение("Схемы намотки 5 - 16 недоступны для выбора!");
	КонецЕсли;
	
	УстановитьСхемуНаклейкиНамоткиТекст();
		
КонецПроцедуры

&НаКлиенте
Процедура НаличиеМеткиПриИзменении(Элемент)	
	Если НЕ Объект.НаличиеМетки Тогда
		Объект.РазмерМетки = "";	
	КонецЕсли;	
	ВидимостьМетки();		
КонецПроцедуры

&НаКлиенте
Процедура НазваниеПечатиПриИзменении(Элемент)

	Объект.НазваниеДизайна = СтрЗаменить(Объект.НазваниеДизайна,"/","");
	Объект.НазваниеДизайна = СтрЗаменить(Объект.НазваниеДизайна,"\","");
	Объект.НазваниеДизайна = СтрЗаменить(Объект.НазваниеДизайна,":","");
	Объект.НазваниеДизайна = СтрЗаменить(Объект.НазваниеДизайна,"?","");
	Объект.НазваниеДизайна = СтрЗаменить(Объект.НазваниеДизайна,"*","х");
	Объект.НазваниеДизайна = СтрЗаменить(Объект.НазваниеДизайна,"<","");
	Объект.НазваниеДизайна = СтрЗаменить(Объект.НазваниеДизайна,">","");
	Объект.НазваниеДизайна = СтрЗаменить(Объект.НазваниеДизайна,"|","");
	Объект.НазваниеДизайна = СтрЗаменить(Объект.НазваниеДизайна,"""","");
		
КонецПроцедуры


#КонецОбласти

//****************Прямые клише*********************

#Область ПрямыеКлише

&НаКлиенте
Процедура ВидыКлишеСекцияПриИзменении(Элемент)
	
	КоличествоЭлементов = Объект.КлишеЛицо.Количество(); 
	ТекущиеДанные = Элементы.КлишеЛицо.ТекущиеДанные;
	ТекущаяПозиция = ТекущиеДанные.НомерСтроки;
	КолиичествоПозиций = ТекущиеДанные.Секция - ТекущаяПозиция; 
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Секция) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Секция > КоличествоЭлементов Тогда
		Объект.КлишеЛицо.Сдвинуть(ТекущиеДанные.НомерСтроки-1, КолиичествоПозиций-1);	
	Иначе
		Объект.КлишеЛицо.Сдвинуть(ТекущиеДанные.НомерСтроки-1, КолиичествоПозиций); 
	КонецЕсли;
	
	ТекущаяПозиция = ?(ТекущаяПозиция > ТекущиеДанные.НомерСтроки, ТекущиеДанные.НомерСтроки,ТекущаяПозиция); 	
	
	Для Инд = ТекущаяПозиция - 1  По КоличествоЭлементов - 1 Цикл
		
		Строка = Объект.КлишеЛицо.Получить(Инд);
		Если ЗначениеЗаполнено(Строка.Секция) Тогда
			Если Строка.Секция > КоличествоЭлементов И Строка.НомерСтроки = КоличествоЭлементов Тогда
				
			Иначе 	
				Строка.Секция = Строка.НомерСтроки;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КлишеЛицоПриИзменении(Элемент)
	
	КоличествоКлишеЛицо();
	КоличествоКлишеОборот();
		
	УстановитьОтборПечатныхФорм();	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПечатныхФорм()
			
	ОтборФормы = ДоступныеФормы.Отбор;
	
	ПолеОтбора = Новый ПолеКомпоновкиДанных("ЦветКлише");	
	ЭлементОтбораЦветКлише = Неопределено;
	
	Для Каждого Элемент из ОтборФормы.Элементы Цикл
		Если Элемент.ЛевоеЗначение = ПолеОтбора Тогда
			ЭлементОтбораЦветКлише = Элемент;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементОтбораЦветКлише = Неопределено Тогда
		ЭлементОтбораЦветКлише = ОтборФормы.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораЦветКлише.ЛевоеЗначение = ПолеОтбора;
		ЭлементОтбораЦветКлише.ВидСравнения  = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбораЦветКлише.Использование = Истина;
		ЭлементОтбораЦветКлише.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;
		
	СписокЦветов = Новый СписокЗначений;	
	Для Каждого СтрокаЦвет из объект.КлишеЛицо Цикл		
		СписокЦветов.Добавить(СтрокаЦвет.ВидКлише);	
	КонецЦикла;
	
	Для Каждого СтрокаЦвет из объект.КлишеОборот Цикл		
		СписокЦветов.Добавить(СтрокаЦвет.ВидКлише);	
	КонецЦикла;
	
	ЭлементОтбораЦветКлише.ПравоеЗначение   = СписокЦветов;	
		
КонецПроцедуры	

&НаКлиенте
Процедура СдвинутьВнизЛицо(Команда)
	
	Колво = Объект.КлишеЛицо.Количество();
	
	ТекущиеДанные = Элементы.КлишеЛицо.ТекущиеДанные;
	Если ТекущиеДанные.НомерСтроки < Колво Тогда
		Объект.КлишеЛицо.Сдвинуть(ТекущиеДанные.НомерСтроки-1, 1);
		ТекущиеДанные.Секция = ТекущиеДанные.НомерСтроки;
		Цвет = Объект.КлишеЛицо[ТекущиеДанные.НомерСтроки-2];
		Цвет.Секция = Цвет.НомерСтроки;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СдвинутьВверхЛицо(Команда)
	
	Колво = Объект.КлишеЛицо.Количество();
	
	ТекущиеДанные = Элементы.КлишеЛицо.ТекущиеДанные;
	Если ТекущиеДанные.НомерСтроки > 1 Тогда
		Объект.КлишеЛицо.Сдвинуть(ТекущиеДанные.НомерСтроки-1, -1);
		ТекущиеДанные.Секция = ТекущиеДанные.НомерСтроки;
		Цвет = Объект.КлишеЛицо[ТекущиеДанные.НомерСтроки];
		Цвет.Секция = Цвет.НомерСтроки;				
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьОбщиеДизайны(Клише)
	
	ОбщиеДизайны.Очистить();
	
	Если Клише = Справочники.мн_ЦветаКлишеДизайнов.ПустаяСсылка() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КлишеЛицо.Ссылка КАК Дизайн
		|ИЗ
		|	Справочник.мн_Дизайны.КлишеЛицо КАК КлишеЛицо
		|ГДЕ
		|	КлишеЛицо.ВидКлише = &ВидКлише
		|	И КлишеЛицо.Ссылка <> &ТекущийДизайн
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КлишеОборот.Ссылка
		|ИЗ
		|	Справочник.мн_Дизайны.КлишеОборот КАК КлишеОборот
		|ГДЕ
		|	КлишеОборот.ВидКлише = &ВидКлише
		|	И КлишеОборот.Ссылка <> &ТекущийДизайн";
	
	Запрос.УстановитьПараметр("ВидКлише", Клише);
	Запрос.УстановитьПараметр("ТекущийДизайн",Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОбщиеДизайны.Загрузить(РезультатЗапроса.Выгрузить());	
	
КонецПроцедуры // ПолучитьОбщиеДизайны()

&НаКлиенте
Процедура КлишеЛицоПриАктивизацииСтроки(Элемент)	
	ТекДанные = Элементы.КлишеЛицо.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда 
		ПолучитьОбщиеДизайны(ТекДанные.ВидКлише);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КлишеЛицоПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Отказ = Истина;	
	КонецЕсли;
	
	Если Объект.КлишеЛицо.Количество() >= 8 И НЕ Объект.СлужебныйДизайн Тогда
		Отказ = Истина;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КлишеЛицоПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)	
	
	КоличествоКлишеЛицо();
	
	Строка = Элементы.КлишеЛицо.ТекущиеДанные;	
	Если НоваяСтрока = Истина Тогда
		Строка.Секция = Строка.НомерСтроки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Строка.Номенклатура) Тогда
		Строка.СухойОстаток =  ПолучитьСухойОстаток(Строка.Номенклатура);
	Иначе
		Строка.СухойОстаток = 0;	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура КлишеЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) =Тип("СправочникСсылка.мн_ЦветаКлишеДизайнов") Тогда
		
		Модифицированность = Истина;
		
		Если НЕ ВыбранноеЗначение.Пустая()Тогда
			ДобавитьКлише(ВыбранноеЗначение);		
		КонецЕсли;
		
	Иначе
		
		Для Каждого ВидКлише из ВыбранноеЗначение Цикл
			НоваяСтрока = Объект.КлишеЛицо.Добавить();
			НоваяСтрока.ВидКлише = ВидКлише;
			НоваяСтрока.Секция = НоваяСтрока.НомерСтроки;
		КонецЦикла;
		
	КонецЕсли;
	
	КоличествоКлишеЛицо();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветКлишеДизайнаПриИзменении(Элемент)
	
	УстановитьОтборПечатныхФорм();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКлише(ВидКлише)
	
	ПараметрыОтбора = Новый Структура("ВидКлише",ВидКлише);
	МассивСтрок = Объект.КлишеЛицо.НайтиСтроки(ПараметрыОтбора);
	
	Если МассивСтрок.Количество() = 0 Тогда
	
		НоваяСтрока = Объект.КлишеЛицо.Добавить();
		НоваяСтрока.ВидКлише = ВидКлише;
		НоваяСтрока.Секция = НоваяСтрока.НомерСтроки;
		
	КонецЕсли;	
		
КонецПроцедуры // ДобавитьКлише()

&НаКлиенте
Процедура ОборотныеКлишеСекцияПриИзменении(Элемент)
	
	КоличествоЭлементов = Объект.КлишеОборот.Количество(); 
	ТекущиеДанные = Элементы.КлишеОборот.ТекущиеДанные;
	ТекущаяПозиция = ТекущиеДанные.НомерСтроки;
	КолиичествоПозиций = ТекущиеДанные.Секция - ТекущаяПозиция; 
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Секция) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Секция > КоличествоЭлементов Тогда
		Объект.КлишеОборот.Сдвинуть(ТекущиеДанные.НомерСтроки-1, КолиичествоПозиций-1);	
	Иначе
		Объект.КлишеОборот.Сдвинуть(ТекущиеДанные.НомерСтроки-1, КолиичествоПозиций); 
	КонецЕсли;
	
	ТекущаяПозиция = ?(ТекущаяПозиция > ТекущиеДанные.НомерСтроки, ТекущиеДанные.НомерСтроки,ТекущаяПозиция); 	
	
	Для Инд = ТекущаяПозиция - 1  По КоличествоЭлементов - 1 Цикл
		
		Строка = Объект.КлишеОборот.Получить(Инд);
		Если ЗначениеЗаполнено(Строка.Секция) Тогда
			Если Строка.Секция > КоличествоЭлементов И Строка.НомерСтроки = КоличествоЭлементов Тогда
				
			Иначе 	
				Строка.Секция = Строка.НомерСтроки;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура КлишеЛицоПроцентПечатиПриИзменении(Элемент)
	РасчетРасходаКраскиЛицо();
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьНормативы(Команда)
		
	МетражПриладки = ПолучитьМетражПриладкиСервер(Объект.ФорматПечати,Объект.КолвоКлишеЛицо,Объект.УпрощеннаяПриладка);
	
	РасчетРасходаКраскиЛицо();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМетражПриладки()

	МетражПриладки = ПолучитьМетражПриладкиСервер(Объект.ФорматПечати,Объект.КолвоКлишеЛицо,Объект.УпрощеннаяПриладка);		

КонецПроцедуры //ОбновитьМетражПриладки()

&НаСервереБезКонтекста
Функция ПолучитьМетражПриладкиСервер(ФорматПечати,КоличествоСекций,УпрощеннаяПриладка)
	
	Если Не ЗначениеЗаполнено(ФорматПечати) ИЛИ КоличествоСекций = 0 Тогда
		Возврат 0;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НормативыПриладкиПечать.НормаПриладки,
		|	НормативыПриладкиПечать.НормаПриладкиСокращенная
		|ИЗ
		|	РегистрСведений.мн_НормативыПриладкиПечать КАК НормативыПриладкиПечать
		|ГДЕ
		|	НормативыПриладкиПечать.ФорматПечати = &ФорматПечати
		|	И НормативыПриладкиПечать.КоличествоСекций = &КоличествоСекций";
	
	Запрос.УстановитьПараметр("КоличествоСекций", КоличествоСекций);
	Запрос.УстановитьПараметр("ФорматПечати", ФорматПечати);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если УпрощеннаяПриладка Тогда
			Возврат Выборка.НормаПриладкиСокращенная;
		Иначе
			Возврат Выборка.НормаПриладки;
		КонецЕсли;

	КонецЦикла;
	
	Возврат 0;
	
КонецФункции // ПолучитьМетражПриладкиСервер()

&НаСервере
Процедура РасчетРасходаКраскиЛицо()

	Нормативы = Справочники.мн_Дизайны.ПолучитьНормуРасходаКрасок(Объект.Ссылка,Перечисления.мн_НанесениеПечати.Лицо);
	
	РасходКраски = Нормативы.РасходКраски;  
		
	РасходКраскиСО = Нормативы.РасходКраскиСухойОстаток;
			
КонецПроцедуры // РасчетРасходаКраски()

&НаКлиенте
Процедура КоличествоКлишеЛицо()
	
	Количество = 0;
	Для Каждого Стр из Объект.КлишеЛицо Цикл
		Если НЕ Стр.ВидКлише.Пустая() Тогда 			
			Количество = Количество + 1;
		КонецЕсли;		
	КонецЦикла;
	
	Объект.КолвоКлишеЛицо = Количество;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПеренестиКлише(Команда)
	
	ТекДанные = Элементы.КлишеЛицо.ТекущиеДанные;
	
	НоваяСтрока = Объект.КлишеОборот.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекДанные);
	
	НоваяСтрока.Секция = НоваяСтрока.НомерСтроки;

	Объект.КлишеЛицо.Удалить(ТекДанные);
	
	КоличествоКлишеОборот(); //Пересчитать количество клише
	
	КоличествоКлишеЛицо();
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

//****************Оборотные клише*********************

#Область ОборотныеКлише

&НаКлиенте
Процедура ОборотныеКлишеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Отказ = Истина;	
	КонецЕсли;
	
	Если Объект.КлишеОборот.Количество() >= 8 И НЕ ОБъект.СлужебныйДизайн Тогда
		Отказ = Истина;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОборотныеКлишеПриИзменении(Элемент)
	
	КоличествоКлишеОборот();
	
	УстановитьОтборПечатныхФорм();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОборотныеКлишеПриАктивизацииСтроки(Элемент)
	ТекДанные = Элементы.КлишеОборот.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ПолучитьОбщиеДизайны(ТекДанные.ВидКлише);	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПодборКлишеИзДизайна(Команда)
	
	ПараметрыОткрытия = Новый Структура;	
	ПараметрыОткрытия.Вставить("МножественныйВыбор",Истина);	
	ПараметрыОткрытия.Вставить("РежимВыбора",Истина);
	ПараметрыОткрытия.Вставить("ЗакрыватьПриВыборе",Ложь);		
	ПараметрыОткрытия.Вставить("Владелец",Объект.Владелец);	
	
	ОткрытьФормуМодально("Справочник.мн_ЦветаКлишеДизайнов.Форма.ФормаВыбораДерево",ПараметрыОткрытия,Элементы.КлишеОборот);	

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборОборотныхФорм()
			
	ОтборФормы = ДоступныеФормы.Отбор;
	
	ПолеОтбора = Новый ПолеКомпоновкиДанных("ЦветКлише");	
	ЭлементОтбораЦветКлише = Неопределено;
	
	Для Каждого Элемент из ОтборФормы.Элементы Цикл
		Если Элемент.ЛевоеЗначение = ПолеОтбора Тогда
			ЭлементОтбораЦветКлише = Элемент;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементОтбораЦветКлише = Неопределено Тогда
		ЭлементОтбораЦветКлише = ОтборФормы.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораЦветКлише.ЛевоеЗначение = ПолеОтбора;
		ЭлементОтбораЦветКлише.ВидСравнения  = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбораЦветКлише.Использование = Истина;
		ЭлементОтбораЦветКлише.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;
		
	СписокЦветов = Новый СписокЗначений;
	
	Для Каждого СтрокаЦвет из объект.КлишеОборот Цикл		
		СписокЦветов.Добавить(СтрокаЦвет.ВидКлише);	
	КонецЦикла;
	
	ЭлементОтбораЦветКлише.ПравоеЗначение = СписокЦветов;	
		
КонецПроцедуры	

&НаКлиенте
Процедура ОборотныеКлишеВидКлишеПриИзменении(Элемент)
	УстановитьОтборОборотныхФорм();
КонецПроцедуры

&НаКлиенте
Процедура ОборотныеКлишеВидКлишеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Владелец) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Контрагент не указан";
		Сообщение.Поле  = "Владелец";
 	    Сообщение.КлючДанных = Объект.Ссылка;
  	    Сообщение.ПутьКДанным = "Объект";		
		Сообщение.Сообщить();
		
		Возврат;				
	КонецЕсли;
	
	СписокЗначений = Новый СписокЗначений;	
	СписокЗначений.Добавить(1,"Новый элемент");	
	СписокЗначений.Добавить(2,"Выбарть клише из другого дизайна");
		
	Выбор = ВыбратьИзСписка(СписокЗначений,Элемент);
	
	Если Выбор =Неопределено Тогда
		
	ИначеЕсли Выбор.Значение = 1 Тогда	
	
		ФормаУпр = ОткрытьФорму("Справочник.мн_ЦветаКлишеДизайнов.ФормаОбъекта",,Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		ФормаУпр.Объект.Владелец = Объект.Владелец;
		
	ИначеЕсли Выбор.Значение = 2 тогда
			
		ПараметрыОткрытия = Новый Структура;	
		
		ПараметрыОткрытия.Вставить("РежимВыбора",Истина);	
		ПараметрыОткрытия.Вставить("Владелец",Объект.Владелец);
		
		ОткрытьФормуМодально("Справочник.мн_ЦветаКлишеДизайнов.Форма.ФормаВыбораДерево",ПараметрыОткрытия,Элемент);	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОборотныеКлишеВидКлишеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		
		СтандартнаяОбработка = Ложь;
		ПараметрыОтбора = Новый Структура("ВидКлише",ВыбранноеЗначение[0]);
		МассивСтрок = Объект.КлишеОборот.НайтиСтроки(ПараметрыОтбора);
		
		Если МассивСтрок.Количество() > 0 Тогда
			Сообщить("Элемент уже выбран.");
        Иначе
			Элементы.КлишеОборот.ТекущиеДанные.ВидКлише = ВыбранноеЗначение[0];	
			Модифицированность = Истина;
		КонецЕсли;
		
	Иначе
		
		ПараметрыОтбора = Новый Структура("ВидКлише",ВыбранноеЗначение);
		МассивСтрок = Объект.КлишеОборот.НайтиСтроки(ПараметрыОтбора);
		
		Если МассивСтрок.Количество() > 0 Тогда
			Сообщить("Элемент уже выбран.");
			СтандартнаяОбработка = Ложь;	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОборотныеКлишеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.мн_ЦветаКлишеДизайнов") Тогда
		
		Модифицированность = Истина;
		
		Если НЕ ВыбранноеЗначение.Пустая()Тогда
			ДобавитьКлише(ВыбранноеЗначение);		
		КонецЕсли;
		
	Иначе
		
		Для Каждого ВидКлише из ВыбранноеЗначение Цикл
			НоваяСтрока = Объект.КлишеОборот.Добавить();
			НоваяСтрока.ВидКлише = ВидКлише;
			НоваяСтрока.Секция = НоваяСтрока.НомерСтроки;
		КонецЦикла;
		
	КонецЕсли;
	
	КоличествоКлишеОборот();
		
КонецПроцедуры

&НаКлиенте
Процедура ОборотныеКлишеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	КоличествоКлишеОборот();
	      	
	Если НоваяСтрока = Ложь Тогда
		
		Строка = Элементы.КлишеОборот.ТекущиеДанные;	
		Строка.Секция = Строка.НомерСтроки;
		
		Если ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			Строка.СухойОстаток =  ПолучитьСухойОстаток(Строка.Номенклатура);
		Иначе
			Строка.СухойОстаток = 0;	
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьНормативыОборот(Команда)
	
	МетражПриладкиОборот = ПолучитьМетражПриладкиСервер(Объект.ФорматПечати,Объект.КолвоКлишеОборот,Объект.УпрощеннаяПриладка);
	
	РасчетРасходаКраскиОборот();
	
КонецПроцедуры

&НаСервере
Процедура РасчетРасходаКраскиОборот()

	Нормативы = Справочники.мн_Дизайны.ПолучитьНормуРасходаКрасок(Объект.Ссылка,Перечисления.мн_НанесениеПечати.Оборот);
	
	РасходКраскиОборот =  Нормативы.РасходКраски;  
		
	РасходКраскиОборотСО = Нормативы.РасходКраскиСухойОстаток;
		
КонецПроцедуры // РасчетРасходаКраски()

&НаКлиенте
Процедура СдвинутьВверхОборот(Команда)
	
	Колво = Объект.КлишеОборот.Количество();
	
	ТекущиеДанные = Элементы.КлишеОборот.ТекущиеДанные;
	Если ТекущиеДанные.НомерСтроки > 1 Тогда
		Объект.КлишеОборот.Сдвинуть(ТекущиеДанные.НомерСтроки-1, -1);
		ТекущиеДанные.Секция = ТекущиеДанные.НомерСтроки;
		Клише = Объект.КлишеОборот[ТекущиеДанные.НомерСтроки];
		Клише.Секция = Клише.НомерСтроки;				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СдвинутьВнизОборот(Команда)
	
	Колво = Объект.КлишеОборот.Количество();
	
	ТекущиеДанные = Элементы.КлишеОборот.ТекущиеДанные;
	
	Если ТекущиеДанные.НомерСтроки < Колво Тогда
		Объект.КлишеОборот.Сдвинуть(ТекущиеДанные.НомерСтроки-1, 1);
		ТекущиеДанные.Секция = ТекущиеДанные.НомерСтроки;
		Цвет = Объект.КлишеОборот[ТекущиеДанные.НомерСтроки-2];
		Цвет.Секция = Цвет.НомерСтроки;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоКлишеОборот()
	
	Количество = 0;
	Для Каждого Стр из Объект.КлишеОборот Цикл
		Если НЕ Стр.ВидКлише.Пустая() Тогда 			
			Количество = Количество + 1;
		КонецЕсли;		
	КонецЦикла;
	
	Объект.КолвоКлишеОборот = Количество;
	
КонецПроцедуры

&НаКлиенте
Процедура КлишеОборотПроцентПечатиПриИзменении(Элемент)
	РасчетРасходаКраскиОборот();
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиКлиешВЛицо(Команда)
	
	ТекДанные = Элементы.КлишеОборот.ТекущиеДанные;
	
	НоваяСтрока = Объект.КлишеЛицо.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекДанные);
	
	НоваяСтрока.Секция = НоваяСтрока.НомерСтроки;
	
	Объект.КлишеОборот.Удалить(ТекДанные);
	
	КоличествоКлишеОборот(); //Пересчитать количество клише
	
	КоличествоКлишеЛицо();
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

//****************ДОПОЛОНИТЕЛЬНЫЕ ФУНКЦИИ*********************
#Область  ДополнительныеПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементов()

	Если ИзменениеТЗ Тогда
		
		Элементы.ИзменениеТЗ.ТолькоПросмотр = Истина;
		Элементы.ШиринаГП.ТолькоПросмотр           = Ложь;
		Элементы.ТехПараметры.ТолькоПросмотр       = Ложь;
		Элементы.ГруппаСхемаНамотки.ТолькоПросмотр = Ложь;
		Элементы.ГруппаСогласование.ТолькоПросмотр = Ложь;		
	Иначе 
		Элементы.ШиринаГП.ТолькоПросмотр           = Истина;
		Элементы.ТехПараметры.ТолькоПросмотр       = Истина;
		Элементы.ГруппаСхемаНамотки.ТолькоПросмотр = Истина;
		Элементы.ГруппаСогласование.ТолькоПросмотр = Истина;
		Элементы.ИзменениеТЗ.ТолькоПросмотр = Ложь;
		
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Элементы.КомандаПерезаполнитьИД.Доступность = Ложь;	
	Иначе 
		Элементы.КомандаПерезаполнитьИД.Доступность = Истина;	
	КонецЕсли;

КонецПроцедуры // УстановитьДоступностьЭлементов()

&НаКлиенте
Процедура УстановитьВидимостьЭлементов()

	Если Объект.ФорматПечати = ПредопределенноеЗначение("Перечисление.ФорматПечати.Comexi") Тогда
		Элементы.ТолькоДоступныеВалы.Видимость = Истина;
		Элементы.ФактическийРазмерМакета.Видимость = Ложь;
		Элементы.ВалЧислоЗубцов.Видимость = Ложь;
	ИначеЕсли Объект.ФорматПечати = ПредопределенноеЗначение("Перечисление.ФорматПечати.Omet") Тогда
		Элементы.ТолькоДоступныеВалы.Видимость = Истина;
		Элементы.ФактическийРазмерМакета.Видимость = Истина;	
		Элементы.ВалЧислоЗубцов.Видимость = Истина;
		
	Иначе
		Элементы.ТолькоДоступныеВалы.Видимость = Ложь;		
		Элементы.ФактическийРазмерМакета.Видимость = Ложь;		
		Элементы.ВалЧислоЗубцов.Видимость = Ложь;		
	КонецЕсли;

КонецПроцедуры // УстановитьВидимостьЭлементов()

&НаКлиенте
Процедура КаталогМакета(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ТекстВопроса = "Дизайн не записан, записать?";		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			Записать();
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;  
	
	Если ЗначениеЗаполнено(Объект.Макет) Тогда
		
		ТекстВопроса = "Каталог макета уже указан, изменить?";		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда			
			Возврат;			
		КонецЕсли;
		
	КонецЕсли;	
	
	ИмяКаталога = "N:\";
	
	Каталог = Новый Файл(ИмяКаталога);
	
	Если НЕ Каталог.Существует() Тогда
	
		Сообщить("Диск ""N"" не подключен. Каталог создать не удалось");
		
		Возврат;
		
	КонецЕсли;
	
	//Мы должны получить строку
	//N:/Дизайны/Контрагент(код)/(Код дизайна) Название дизайна:ДатаДизайна
	
	КодДизайна = Объект.Код;
		
	НаименованиеДизайна = СтрЗаменить(Объект.Наименование,"""","");	
	
	//ИмяКаталога = ИмяКаталога +"Дизайны\" + Объект.Владелец.Наименование +"("+Прав(СокрЛП(Объект.Владелец.Код),5)+ ")\"+СокрЛП(Объект.Наименование);    
	ИмяКаталога = ИмяКаталогаНаСервере(ИмяКаталога,Объект.Владелец,Объект.Наименование);
	
	ИмяКаталога = СтрЗаменить(ИмяКаталога,"""",""); 
	Каталог = Новый Файл(ИмяКаталога);
	
	Если НЕ Каталог.Существует() Тогда	
		СоздатьКаталог(ИмяКаталога);			
	КонецЕсли;	
	
	Объект.Макет = ИмяКаталога;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидКлишеЦветопроба(ЦветКлишеДизайна)

	Возврат ЦветКлишеДизайна.Цветопроба;

КонецФункции // ЦведКлишеДизайна()

&НаСервереБезКонтекста
Функция ИмяКаталогаНаСервере(ИмяКаталога,Владелец,Наименование)

	ИмяКаталога = ИмяКаталога +"Дизайны\" + Владелец.Наименование +"("+Прав(СокрЛП(Владелец.Код),5)+ ")\"+СокрЛП(Наименование);    
	
	Возврат ИмяКаталога;

КонецФункции // ИмяКаталогаНаСервере()
 
&НаКлиенте
Процедура РасчитатьШиринуМатериала()

	ШиринаМатериала = Объект.ШиринаГП * Объект.КоличествоРучьев;
	
	ШиринаСОпорнымиПолосами = 0;
	
	Если ШиринаМатериала > 0 Тогда
		
		Если Объект.ПриводныеЭлементы = "Кресты" Тогда
			ШиринаСОпорнымиПолосами = ШиринаМатериала + 20; 	
		Иначе
			ШиринаСОпорнымиПолосами = ШиринаМатериала;  	
		КонецЕсли;
			
	КонецЕсли; 
	
	ШиринаТиражногоМатериала  = ?(ШиринаСОпорнымиПолосами> 0, ШиринаСОпорнымиПолосами  + 10, 0);
	
	Объект.ШиринаМатериала                 = ШиринаТиражногоМатериала; 
	
	Объект.ШиринаВерсткиСОпорнымиПолосами  = ШиринаСОпорнымиПолосами; 
	
	Объект.ШиринаТиражногоМатериала        = ШиринаТиражногоМатериала; 
	
КонецПроцедуры // РасчитатьШиринуМатериала()

&НаКлиенте
Процедура ПодобратьРапортВала(КоличествоРапортов = Неопределено)
		
	//!!! НЕ ПОДБИРАТЬ ЕСЛИ ШАГ ПЕЧАТИ НЕ ЗАПОЛНЕН
	Если НЕ ЗначениеЗаполнено(Объект.ШагПечати) Тогда
		ПоказатьОповещениеПользователя("Не удалось подобрать вал!");
		Возврат;		
	КонецЕсли;
	
	//!!!Определить минимальный диаметр вала и допуски
	МаксДлинаОкружностиВала = ДиаметрМакс(Объект.ФорматПечати);

	Если МаксДлинаОкружностиВала = Неопределено Тогда
		ПоказатьОповещениеПользователя("Не удалось подобрать вал!");
		Возврат;
	КонецЕсли;
	
	Вал = Неопределено;
	
	//!!!Количество рапортов - количество оттисков на печатном валу, 

	Если КоличествоРапортов = Неопределено Тогда
		//Количество рапортов не задано. подбираем подходящий вариант из всех возможных

		КоличествоРапортов = 1;
		ЦелеваяДлинаОкружностиВала =  Окр(Объект.ШагПечати * КоличествоРапортов,2);
	
		//!!!ПЕРЕБЕРАЕМ ПЕЧАТНЫЕ ВАЛИ ПОКА НЕ НАЙДЕМ ПОДХОДЯЩИЙ ЛИБО НЕ УПРЕМСЯ В МАКСИМАЛЬНЫЙ РАЗМЕРА ВАЛА
		Пока ЦелеваяДлинаОкружностиВала <= МаксДлинаОкружностиВала Цикл
			
			Вал = ПодобратьВалСервер(ЦелеваяДлинаОкружностиВала,ТолькоДоступныеВалы);
			Если Вал <> Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			//!!!ПОДХОДЯЩИЙ ВАЛ НЕ НАЙДЕН УВЕЛИЧИВАЕМ КОЛИЧЕСТВО РАПОРТОВ НА ЕДИНИЦУ
			КоличествоРапортов = КоличествоРапортов + 1;
			ЦелеваяДлинаОкружностиВала = Окр(Объект.ШагПечати * КоличествоРапортов,2);		
			
		КонецЦикла;
		
	Иначе 
		//Проверяем выбранное количество на рапорте
		ЦелеваяДлинаОкружностиВала =  Окр(Объект.ШагПечати * КоличествоРапортов,2);		
		Вал = ПодобратьВалСервер(ЦелеваяДлинаОкружностиВала,ТолькоДоступныеВалы);	
		
	КонецЕсли;
		
	//!!!ЗАПОЛНИМ НАЙДЕНЫЕ ВАЛ И РАПОРТ
	Если Вал <> Неопределено Тогда
		Объект.Вал = Вал;
		Объект.КоличествоНаРапорте = КоличествоРапортов;
	Иначе 
		Объект.Вал = Неопределено;
		ПоказатьОповещениеПользователя("Не удалось подобрать вал!");		
	КонецЕсли;
	
КонецПроцедуры// ПодборВала()

&НаСервереБезКонтекста
Функция ДиаметрМакс(ФорматПечати)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	мн_Валы.Допуск,
		|	мн_Валы.ДлинаОкружности КАК Диаметр,
		|	мн_Валы.ДлинаОкружности КАК Код
		|ИЗ
		|	Справочник.мн_Валы КАК мн_Валы
		|ГДЕ
		|	мн_Валы.НеДоступен = ЛОЖЬ
		|	И мн_Валы.ФорматПечати = &ФорматПечати
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДлинаОкружности УБЫВ";
	Запрос.УстановитьПараметр("ФорматПечати",ФорматПечати);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Диаметр + Выборка.Допуск;
	КонецЦикла;

	Возврат Неопределено;
	
КонецФункции // МинимальныйДеаметрВала()

//ВОЗВРАЩАЕТ ВАЛ МИНИМАЛЬНО ОТЛИЧАЮЩИЙСЯ ПО ДОПУСТИМЫМ РАЗМЕРАМ ОТ ТРЕБУЕМОЙ ДЛИННЫ ОКРУЖНОСТИ ВАЛА
&НаСервереБезКонтекста
Функция ПодобратьВалСервер(ТребуемаяДлинаОкружности,ТолькоДосупныйВал)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТребуемаяДлина",ТребуемаяДлинаОкружности);	
	
	Если ТолькоДосупныйВал Тогда
		Запрос.Текст = "ВЫБРАТЬ
			|	мн_Валы.Ссылка,
			|	мн_Валы.ДлинаОкружности - мн_Валы.Допуск КАК ДиаметрМин,
			|	мн_Валы.ДлинаОкружности + мн_Валы.Допуск КАК ДиаметрМакс,
			|	ВЫБОР
			|		КОГДА мн_Валы.ДлинаОкружности - &ТребуемаяДлина > 0
			|			ТОГДА мн_Валы.ДлинаОкружности - &ТребуемаяДлина
			|		ИНАЧЕ -(мн_Валы.ДлинаОкружности - &ТребуемаяДлина)
			|	КОНЕЦ КАК Разница,
			|	мн_Валы.ДлинаОкружности
			|ПОМЕСТИТЬ Валы
			|ИЗ
			|	Справочник.мн_Валы КАК мн_Валы
			|ГДЕ   
			|	мн_Валы.НеДоступен = ЛОЖЬ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	Валы.Ссылка,
			|	Валы.Разница КАК Разница
			|ИЗ
			|	Валы КАК Валы
			|ГДЕ
			|	Валы.ДиаметрМин <= &ТребуемаяДлина
			|	И Валы.ДиаметрМакс >= &ТребуемаяДлина
			|
			|УПОРЯДОЧИТЬ ПО
			|	Разница";
	Иначе 
		Запрос.Текст = "ВЫБРАТЬ
			|	мн_Валы.Ссылка,
			|	мн_Валы.ДлинаОкружности - мн_Валы.Допуск КАК ДиаметрМин,
			|	мн_Валы.ДлинаОкружности + мн_Валы.Допуск КАК ДиаметрМакс,
			|	ВЫБОР
			|		КОГДА мн_Валы.ДлинаОкружности - &ТребуемаяДлина > 0
			|			ТОГДА мн_Валы.ДлинаОкружности - &ТребуемаяДлина
			|		ИНАЧЕ -(мн_Валы.ДлинаОкружности - &ТребуемаяДлина)
			|	КОНЕЦ КАК Разница,
			|	мн_Валы.ДлинаОкружности
			|ПОМЕСТИТЬ Валы
			|ИЗ
			|	Справочник.мн_Валы КАК мн_Валы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	Валы.Ссылка,
			|	Валы.Разница КАК Разница
			|ИЗ
			|	Валы КАК Валы
			|ГДЕ
			|	Валы.ДиаметрМин <= &ТребуемаяДлина
			|	И Валы.ДиаметрМакс >= &ТребуемаяДлина
			|
			|УПОРЯДОЧИТЬ ПО
			|	Разница";
			
	КонецЕсли;
		
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл		
		Возврат ВыборкаДетальныеЗаписи.Ссылка;			
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // ПодобратьВалСервер()

&НаКлиенте
Процедура ЗаполнитьДлинуПечатиВала()

	ДлинаПечати = Объект.ШагПечати * Объект.КоличествоНаРапорте;	

КонецПроцедуры // ДиаметрВала()

&НаКлиенте
Процедура РасчетОтклоненияРазмераМакета()

	Если Объект.ФорматПечати = ПредопределенноеЗначение("Перечисление.ФорматПечати.Omet") Тогда
		Объект.ФактическийРазмерМакета = РасчетОтклоненияРазмераМакетаСервер(Объект.Вал,Объект.ШагПечати, Объект.КоличествоНаРапорте);	
	Иначе 
		Объект.ФактическийРазмерМакета = "";
	КонецЕсли;
		
КонецПроцедуры // РасчетОтклоненияРазмераМакета()

&НаСервереБезКонтекста
Функция РасчетОтклоненияРазмераМакетаСервер(Вал,ШагПечати, КоличествоРапортов)

	Если НЕ ЗначениеЗаполнено(Вал) ИЛИ КоличествоРапортов = 0 Тогда
		Возврат 0;
	КонецЕсли;	
	Оттиск = Окр(Вал.ДлинаОкружности / КоличествоРапортов,2);
	Отклонение = Оттиск - ШагПечати;
	Если Отклонение > 0 Тогда
		РазмерМакета = Строка(Оттиск) + " (+"+Строка(Отклонение)+" мм.)";
	ИначеЕсли Отклонение < 0 Тогда
		РазмерМакета = Строка(Оттиск) + " (-"+Строка(Отклонение)+" мм.)";
	Иначе
		РазмерМакета = Строка(Оттиск);
	КонецЕсли;
	//Возврат  (Вал.ДлинаОкружности - ШагПечати * КоличествоРапортов)/КоличествоРапортов;
 	Возврат РазмерМакета;
КонецФункции // ДиаметрВала()

&НаСервере
Процедура ПроверкаГодностиКомплектаФорм()

	Если Объект.КлишеЛицо.Количество() = 0 Тогда
		СтатусФорм = "Комплект форм отсутствует!";
		Возврат;
	КонецЕсли;
	
	Текст = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	              |	ДизайныКлишеЛицо.Ссылка КАК Ссылка,
	              |	ДизайныКлишеЛицо.ВидКлише КАК ВидКлише
	              |ПОМЕСТИТЬ Цвета
	              |ИЗ
	              |	Справочник.мн_Дизайны.КлишеЛицо КАК ДизайныКлишеЛицо
	              |ГДЕ
	              |	ДизайныКлишеЛицо.Ссылка = &Ссылка
	              |	И ДизайныКлишеЛицо.ВидКлише <> ЗНАЧЕНИЕ(Справочник.мн_ЦветаКлишеДизайнов.ПустаяСсылка)
	              |
	              |ОБЪЕДИНИТЬ
	              |
	              |ВЫБРАТЬ
	              |	КлишеОборот.Ссылка,
	              |	КлишеОборот.ВидКлише
	              |ИЗ
	              |	Справочник.мн_Дизайны.КлишеОборот КАК КлишеОборот
	              |ГДЕ
	              |	КлишеОборот.Ссылка = &Ссылка
	              |	И КлишеОборот.ВидКлише <> ЗНАЧЕНИЕ(Справочник.мн_ЦветаКлишеДизайнов.ПустаяСсылка)
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	ПечатныеФормы.НомерКлише,
	              |	ПечатныеФормы.ЦветКлише,
	              |	ПечатныеФормы.Состояние,
	              |	ПечатныеФормы.НомерКлише.ДатаПоступления,
	              |	ПечатныеФормы.НомерКлише.ДатаСписания,
	              |	РАЗНОСТЬДАТ(ПечатныеФормы.НомерКлише.ДатаПоступления, НАЧАЛОПЕРИОДА(&ТекДата, ДЕНЬ), ДЕНЬ) КАК СрокХранения,
	              |	ЕСТЬNULL(ФормыНаработкаОстатки.НаработкаОттисковОстаток, 0) КАК КоличествоОттисков
	              |ПОМЕСТИТЬ Клише
	              |ИЗ
	              |	РегистрСведений.мн_ПечатныеФормы.СрезПоследних(
	              |			,
	              |			ЦветКлише В
	              |				(ВЫБРАТЬ
	              |					Цвета.ВидКлише
	              |				ИЗ
	              |					Цвета КАК Цвета)) КАК ПечатныеФормы
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.мн_ПечатныеФормыНаработка.Остатки(
	              |				,
	              |				ПечатнаяФорма.ЦветКлише В
	              |					(ВЫБРАТЬ
	              |						Цвета.ВидКлише
	              |					ИЗ
	              |						Цвета КАК Цвета)) КАК ФормыНаработкаОстатки
	              |		ПО ПечатныеФормы.НомерКлише = ФормыНаработкаОстатки.ПечатнаяФорма
	              |ГДЕ
	              |	ПечатныеФормы.Состояние = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.СостояниеКлише.Годный)
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	Цвета.ВидКлише,
	              |	ЕСТЬNULL(Клише.НомерКлише, НЕОПРЕДЕЛЕНО) КАК ПечатнаяФорма
	              |ИЗ
	              |	Цвета КАК Цвета
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Клише КАК Клише
	              |		ПО Цвета.ВидКлише = Клише.ЦветКлише
	              |ГДЕ
	              |	Клише.НомерКлише ЕСТЬ NULL
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	ЕСТЬNULL(МАКСИМУМ(Клише.СрокХранения), 0) КАК СрокХранения
	              |ИЗ
	              |	Клише КАК Клише
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	ЕСТЬNULL(МАКСИМУМ(Клише.КоличествоОттисков), 0) КАК КоличествоОттисков
	              |ИЗ
	              |	Клише КАК Клише";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	// контроль коплектации
	КомплектацияФорм = РезультатЗапроса[2].Выбрать();
	
	Если КомплектацияФорм.Количество() > 0 Тогда
		
		Текст = "Некомплект форм. ";	
		
	КонецЕсли;

	// контроль срока хранения	
	СрокХранения = РезультатЗапроса[3].Выбрать();
	
	Если СрокХранения.Количество() = 1 Тогда 
		
		СрокХранения.Следующий();
		
		Если СрокХранения.СрокХранения > 547 Тогда
			Текст = Текст + "Комплект хранится "+ СрокХранения.СрокХранения +" (дней). Превышен допустимый срох хранения.";	
		КонецЕсли;

	КонецЕсли;
	
	//контроль наработки оттисков
	Наработка = РезультатЗапроса[4].Выбрать();
	
	Если Наработка.Количество() = 1 Тогда 
		
		Наработка.Следующий();
		
		Если Наработка.КоличествоОттисков > 500000 Тогда
			Текст = Текст + "Формы выработали ресур по количеству оттисков " +Наработка.КоличествоОттисков+" . ";	
		КонецЕсли;

	КонецЕсли;
	
	Если СтрДлина(Текст) = 0 Тогда
		Текст = "Комплект форм пригоден";
		Элементы.СтатусФорм.ЦветТекста = WebЦвета.Зеленый;
	КонецЕсли;
	
	СтатусФорм = Текст;	

КонецПроцедуры // ПроверкаГодностиКомплектаФорм()

&НаКлиенте
Процедура МакетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(Режим);
	
	ДиалогВыбораФайла.ПолноеИмяФайла = "";
	
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	
	ДиалогВыбораФайла.Заголовок  = " Выберите файл макета";
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		Объект.Макет = ДиалогВыбораФайла.Каталог;
		
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура МакетОчистка(Элемент, СтандартнаяОбработка)
	
	Если НЕ Объект.Макет = "" Тогда
		
		Режим = РежимДиалогаВопрос.ДаНет;
		
		Ответ = Вопрос("Очистить расположение макета?", Режим, 0);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МакетОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ Объект.Макет = "" Тогда
		
		//КомандаСистемы("explorer.exe "+Элемент.Значение);
		
		ЗапуститьПриложение(Объект.Макет);		
		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчет(Команда)
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветаДизайнаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Объект.КлишеЛицо = Объект.КлишеЛицо.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветаДизайнаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Объект.Ссылка.Пустая() Тогда
	
		КодВозврата = Вопрос("Дизайн не записан, записать?",РежимДиалогаВопрос.ДаНет);
		Если КодВозврата = КодВозвратаДиалога.Да Тогда
			Результат = Записать();	
			Если не Результат = Истина Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не удалось записать элемент";
				Сообщение.Поле = "НазваниеПечати";
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Сообщить();
				Отказ = Истина;	
			Иначе
				УстановитьОтборПечатныхФорм();
			КонецЕсли;			
		Иначе 
			Отказ = истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыКлишеВидКлишеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)	

	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Владелец) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Контрагент не указан";
		Сообщение.Поле  = "Владелец";
 	    Сообщение.КлючДанных = Объект.Ссылка;
  	    Сообщение.ПутьКДанным = "Объект";		
		Сообщение.Сообщить();
		
		Возврат;				
	КонецЕсли;
	
	СписокЗначений = Новый СписокЗначений;	
	СписокЗначений.Добавить(1,"Новый элемент");	
	СписокЗначений.Добавить(2,"Выбрать из другого дизайна");
		
	Выбор = ВыбратьИзСписка(СписокЗначений,Элемент);
	
	Если Выбор =Неопределено Тогда
		
	ИначеЕсли Выбор.Значение = 1 Тогда	
	
		ФормаУпр = ОткрытьФорму("Справочник.мн_ЦветаКлишеДизайнов.ФормаОбъекта",,Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		ФормаУпр.Объект.Владелец = Объект.Владелец;
		
	ИначеЕсли Выбор.Значение = 2 тогда
			
		ПараметрыОткрытия = Новый Структура;	
		
		ПараметрыОткрытия.Вставить("РежимВыбора",Истина);	
		ПараметрыОткрытия.Вставить("Владелец",Объект.Владелец);
		
		ОткрытьФормуМодально("Справочник.мн_ЦветаКлишеДизайнов.Форма.ФормаВыбораДерево",ПараметрыОткрытия,Элемент);	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыКлишеВидКлишеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		
		СтандартнаяОбработка = Ложь;
		ПараметрыОтбора = Новый Структура("ВидКлише",ВыбранноеЗначение[0]);
		МассивСтрок = Объект.КлишеЛицо.НайтиСтроки(ПараметрыОтбора);
		
		Если МассивСтрок.Количество() > 0 Тогда
			Сообщить("Элемент уже выбран.");
        Иначе
			Элементы.КлишеЛицо.ТекущиеДанные.ВидКлише = ВыбранноеЗначение[0];	
			Модифицированность = Истина;
		КонецЕсли;
		
	Иначе
		
		ПараметрыОтбора = Новый Структура("ВидКлише",ВыбранноеЗначение);
		МассивСтрок = Объект.КлишеЛицо.НайтиСтроки(ПараметрыОтбора);
		
		Если МассивСтрок.Количество() > 0 Тогда
			Сообщить("Элемент уже выбран.");
			СтандартнаяОбработка = Ложь;	
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьМетки()

Элементы.РазмерМетки.Видимость = Объект.НаличиеМетки;	

КонецПроцедуры // ВидимостьМетки()

&НаКлиенте
Процедура ИзмененияСвойствОповестить(Команда)
	ОповеститьОбИзмененииТЗ();
КонецПроцедуры

// Процедура сохраняет версию ТЗ в виде структуры регистр сведений версии объектов 
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
&НаСервере
Процедура СохранитьВерсиюТЗ()
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВерсииОбъектов.НомерВерсии,
		|	ВерсииОбъектов.Объект,
		|	ВерсииОбъектов.ДатаВерсии КАК ДатаВерсии
		|ИЗ
		|	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
		|ГДЕ
		|	ВерсииОбъектов.Объект = &Объект
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаВерсии УБЫВ";
	
	Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	НомерВерсии = 1;	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НомерВерсии = ВыборкаДетальныеЗаписи.НомерВерсии + 1;	
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура;

	СтруктураПараметров.Вставить("Владелец",Объект.Владелец); 	
	СтруктураПараметров.Вставить("ШиринаГП",Объект.ШиринаГП); 	
	СтруктураПараметров.Вставить("ШагПечати",Объект.ШагПечати); 	
	СтруктураПараметров.Вставить("ШиринаМатериала",Объект.ШиринаМатериала); 	
	СтруктураПараметров.Вставить("НаличиеМетки",Объект.НаличиеМетки); 	
	СтруктураПараметров.Вставить("РазмерМетки",Объект.РазмерМетки); 	
	СтруктураПараметров.Вставить("РасположениеМетки",Объект.РасположениеМетки); 	
	СтруктураПараметров.Вставить("КоличествоРучьев",Объект.КоличествоРучьев); 	
	СтруктураПараметров.Вставить("НаправлениеПечати",Объект.НаправлениеПечати); 	
	СтруктураПараметров.Вставить("ЗапечатываемыйМатериал",Объект.ЗапечатываемыйМатериал); 		
	СтруктураПараметров.Вставить("СхемаНамотки",Объект.СхемаНамотки); 		
	СтруктураПараметров.Вставить("ЛицоОборот",Объект.ЛицоОборот); 		
	СтруктураПараметров.Вставить("ПечатьСЗаказчиком",Объект.ПечатьСЗаказчиком); 	
	СтруктураПараметров.Вставить("Цветопроба",Объект.Цветопроба); 	
	СтруктураПараметров.Вставить("ПечатьПоОбразуЗаказчика",Объект.ПечатьПоОбразуЗаказчика); 	
	СтруктураПараметров.Вставить("Технолог",Объект.Технолог); 	
	СтруктураПараметров.Вставить("Шпуля",Объект.Шпуля); 	

	НаборЗаписей = РегистрыСведений.ВерсииОбъектов.СоздатьНаборЗаписей();		
	НаборЗаписей.Отбор.Объект.Установить(Объект.Ссылка);
	НаборЗаписей.Прочитать();
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Объект        = Объект.Ссылка;
	НоваяЗапись.НомерВерсии   = НомерВерсии;
	ВерсияОбъекта = Новый ХранилищеЗначения(СтруктураПараметров, Новый СжатиеДанных(9));
	НоваяЗапись.ВерсияОбъекта = ВерсияОбъекта;
	НоваяЗапись.АвторВерсии   = ПараметрыСеанса.ТекущийПользователь;
	НоваяЗапись.ДатаВерсии    = ТекущаяДата();
	НоваяЗапись.ТипВерсииОбъекта = Перечисления.ТипыВерсийОбъекта.ИзмененоПользователем;
	НаборЗаписей.Записать();

КонецПроцедуры // СохранитьВерсиюТЗ()

&НаСервере
Процедура ОповеститьОбИзмененииТЗ()
	
	//ПОЛУЧИТЬ СПИСОК ПОЛУЧАТЕЛЕЙ ЕСЛИ ОН ПУСТ ТО ВОЗВРАТ
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписокРассылкиИзмененияПрайса.Наименование КАК Имя,
	|	СписокРассылкиИзмененияПрайса.Адрес
	|ПОМЕСТИТЬ Адресаты
	|ИЗ
	|	Справочник.СписокРассылкиИзмененияПрайса КАК СписокРассылкиИзмененияПрайса
	|ГДЕ
	|	СписокРассылкиИзмененияПрайса.СогласованиеТЗДизайна = ИСТИНА
	|	И СписокРассылкиИзмененияПрайса.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СписокРассылкиИзмененияПрайса.Наименование,
	|	СписокРассылкиИзмененияПрайса.Адрес
	|ИЗ
	|	Справочник.СписокРассылкиИзмененияПрайса КАК СписокРассылкиИзмененияПрайса
	|ГДЕ
	|	СписокРассылкиИзмененияПрайса.Пользователь = &Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Адресаты.Имя КАК Имя,
	|	Адресаты.Адрес
	|ИЗ
	|	Адресаты КАК Адресаты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Имя
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Пользователь", Объект.Менеджер);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаПолучателиРассылки = РезультатЗапроса.Выбрать();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;	
		
	
	//ПОЛУЧИТЬ ПРЕДЫДУЩУЮ ВЕРСИЮ ТЗ, ЕСЛИ ПРЕДЫДУЩАЯ ВЕРСИЯ НЕ СУЩЕСТВУЕТ ЗАПОЛНИТЬ ТЕКСТ ПИСЬМА
	//ИНАЧЕ ТЕКСТ ПИСЬМА СРАВНИТЬ С ПРЕДЫДУЩЕЙ ВЕРСИЕЙ ТЗ И ВЫДЕЛИТЬ ЖИРНЫМ ВНЕСЕННЫЕ ИЗМЕНЕНИЯ!!	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВерсииОбъектов.Объект,
		|	ВерсииОбъектов.ВерсияОбъекта,
		|	ВерсииОбъектов.НомерВерсии,
		|	ВерсииОбъектов.АвторВерсии,
		|	ВерсииОбъектов.ДатаВерсии
		|ИЗ
		|	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
		|ГДЕ
		|	ВерсииОбъектов.Объект = &СсылкаНаОбъект
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВерсииОбъектов.ДатаВерсии УБЫВ";
	
	Запрос.УстановитьПараметр("СсылкаНаОбъект", Объект.Ссылка);	
	РезультатЗапроса = Запрос.Выполнить();	
	ТекстПисьма ="";
	
	Если РезультатЗапроса.Пустой() Тогда
		//!! ЗАПОЛНЯЮ ТЕКСТ ПИСЬМА В СЛУЧАЕ НОВОГО ДИЗАЙНА
		ТекстПисьма = "<h3>Установка свойств дизайна " + Объект.Наименование + "</h3>"; 
		ТекстПисьма = ТекстПисьма + "Заказчик:  <b>"+Объект.Владелец +"</b><br/>";	
		ТекстПисьма = ТекстПисьма + "Ширина ГП (ручья), мм.:  <b>"+Объект.ШиринаГП +"</b><br/>";
		ТекстПисьма = ТекстПисьма + "Шаг печати, мм.:  <b>"       +Объект.ШагПечати +"</b><br/>";
		ТекстПисьма = ТекстПисьма + "Планируемая ширина печат-го материала:<b>  "+Объект.ШиринаМатериала  +"</b><br/>";
		ТекстПисьма = ТекстПисьма + "Наличие метки:  <b>"         +Объект.НаличиеМетки +"</b><br/>";
		ТекстПисьма = ТекстПисьма + "Размер метки, X*Y, мм.:  <b>"+Объект.РазмерМетки +"</b><br/>";
		ТекстПисьма = ТекстПисьма + "Расположение метки:  <b>"    +Объект.РасположениеМетки +"</b><br/>";
		ТекстПисьма = ТекстПисьма + "Количество ручьев:  <b>"     +Объект.КоличествоРучьев +"</b><br/>";
		ТекстПисьма = ТекстПисьма + "Тип печати:  <b>"            +Объект.НаправлениеПечати +"</b><br/>";
		ТекстПисьма = ТекстПисьма + "Запечатываемый материал:  <b>"+Объект.ЗапечатываемыйМатериал +"</b><br/>";	
		ТекстПисьма = ТекстПисьма + "Схема намотки:  <b>"         +Объект.СхемаНамотки +"</b><br/>";
		ТекстПисьма = ТекстПисьма + "Шпуля:  <b>"                 +Объект.Шпуля +"</b><br/>";	
		ТекстПисьма = ТекстПисьма + "Лицо оборот:  <b>"           +Объект.ЛицоОборот +"</b><br/>";	
		ТекстПисьма = ТекстПисьма + "Печать в присутствии заказчика:  <b>"+Объект.ПечатьСЗаказчиком +"</b><br/>";	
		ТекстПисьма = ТекстПисьма + "Наличие цветопробы:  <b>"    +Объект.Цветопроба +"</b><br/>";	
		ТекстПисьма = ТекстПисьма + "Печать по образу заказчика:  <b>"+Объект.ПечатьПоОбразуЗаказчика +"</b><br/>";	
		ТекстПисьма = ТекстПисьма + "Технолог ДЗГУ:  <b>"         +Объект.Технолог +"</b><br/>";	
		ТекстПисьма = ТекстПисьма + "<br/>Дата изменения:  <b>"   +Формат(ТекущаяДата(),"ДЛФ=DDT")+"</b><br/>";
		ТекстПисьма = ТекстПисьма + "Ответственный:  <b>"         +ПараметрыСеанса.ТекущийПользователь + "</b><br/>"; 
		
		//!! ЗАПОЛНЯЮ ТЕКСТ ПИСЬМА В СЛУЧАЕ ВОЗМОЖНОГО ИЗМЕНЕНИЯ В ТЗ
		//!! ЭТО УСЛОВИЕ СРАБАТЫВАЕТ В СЛУЧАЕ ИЗМЕНЕНИЯ В ТЗ И В СЛУЧАЕ ОПОВЕЩЕНИЯ
	Иначе
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ВерсияОбъектаХранилище = ВыборкаДетальныеЗаписи.ВерсияОбъекта;
			Если ТипЗнч(ВерсияОбъектаХранилище) = Тип("ХранилищеЗначения") Тогда
				СтараяВерсияДок = ВерсияОбъектаХранилище.Получить();
			КонецЕсли;
		КонецЦикла;	
		
		МетаданнеДизайна = Объект.Ссылка.Метаданные().Реквизиты;
		СтандартныеРеквизиты = Объект.Ссылка.Метаданные().СтандартныеРеквизиты;
		
		ТекстПисьма = "<h3>"+ "Изменение свойств дизайна " + Объект.Наименование +"</h3>"; 
		
		ЕстьИзменения = Ложь;
		
		Для каждого КлючИЗначение из СтараяВерсияДок Цикл
			
			Реквизит = МетаданнеДизайна.Найти(КлючИЗначение.Ключ);
			
		    //!!!КЛЮЧ НЕ НАЙДЕН В РЕКВИЗИТАХ ВОЗМОЖНО ЭТО ПРЕДОПРЕДЕЛЕННЫЙ ЭЛЕМЕНТ
			Если Реквизит = Неопределено Тогда
				Для каждого СтандартныйРеквизит из СтандартныеРеквизиты Цикл					
					Если СтандартныйРеквизит.Имя = КлючИЗначение.Ключ Тогда														
						Реквизит = СтандартныйРеквизит;					
						Прервать;					
					КонецЕсли;				
				КонецЦикла;		
			КонецЕсли;

			//!!ЕСЛИ ТЕКУЩЕЕ ЗНАЧЕНИЕ ОТЛИЧАЕТСЯ ОТ СОХРАНЕННОГО РАНЕЕ ВЫДЕЛЯЕМ ЕГО ЖИРНЫМ В ТЕКСТЕ ПИСЬМА ИНАЧЕ
			Если КлючИЗначение.Значение <> Объект[КлючИЗначение.Ключ] Тогда				
				ТекстПисьма = ТекстПисьма + "<b>" + ?(Реквизит = Неопределено," ",Реквизит.Синоним +":  ") + Объект[КлючИЗначение.Ключ] + "</b>,  Старое значение:  "+КлючИЗначение.Значение + "<br/>"; ;
				ЕстьИзменения = Истина;
			Иначе					
				ТекстПисьма = ТекстПисьма + ?(Реквизит = Неопределено," ",Реквизит.Синоним +":  ") + КлючИЗначение.Значение + "<br/>";
			КонецЕсли;
			
		КонецЦикла;
		
		//!! Если есть изменения заполняем текущего пользователя иначе автора последних изменений ТЗ
		ТекстПисьма = ТекстПисьма +"<br/>Дата изменения:  <b>" +?(ЕстьИзменения, Формат(ТекущаяДата(),"ДЛФ=DDT"),Формат(ВыборкаДетальныеЗаписи.ДатаВерсии,"ДЛФ=DDT"))+"</b><br/>";
		ТекстПисьма = ТекстПисьма +"Ответственный:  <b>" + ?(ЕстьИзменения,ПараметрыСеанса.ТекущийПользователь,ВыборкаДетальныеЗаписи.АвторВерсии) + "</b><br/>"; 
		
	КонецЕсли;
	
	ПараметрыПочты = новый ИнтернетПочтовыйПрофиль;
	ПараметрыПочты.АдресСервераSMTP   = "smtp.yandex.ru";
	ПараметрыПочты.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
	ПараметрыПочты.ПользовательSMTP   = "upp@dzgu.ru";
	ПараметрыПочты.ПарольSMTP         = "Fe3je8ud";
	ПараметрыПочты.ПортSMTP           = 0;
	ПараметрыПочты.ИспользоватьSSLSMTP = Истина;
	
	Письмо = новый ИнтернетПочтовоеСообщение;
	Пока ВыборкаПолучателиРассылки.Следующий() Цикл
		Адрес = Письмо.Получатели.Добавить(СокрЛП(ВыборкаПолучателиРассылки.Адрес));
		Адрес.ОтображаемоеИмя =ВыборкаПолучателиРассылки.Имя;
	КонецЦикла;
	
	Письмо.Тема =           "Установка свойств дизайна -" + Объект.Наименование;
	Письмо.ИмяОтправителя = "УПП";
	Письмо.Отправитель =    "upp@dzgu.ru";
	
	//ЗАПОЛНЕНИЕ ТЕКСТА ПИСЬМА	
	Текст =           Письмо.Тексты.Добавить();     
	Текст.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;     
	Текст.Текст =     ТекстПисьма;
	
	
	Подключение=новый ИнтернетПочта;
	Попытка
		Подключение.Подключиться(ПараметрыПочты);
		Подключение.Послать(Письмо);
		Сообщить ("Письмо отправлено успешно.");
	Исключение
		Сообщить ("Письмо не отправлено." + ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры // ОповеститьОИзмененииСвойств()

&НаКлиенте
Процедура ОткрытьОтчетПечатныеФормы(Команда)
	
	
КонецПроцедуры

&НаКлиенте
Процедура ФлагТолькоГодныеПриИзменении(Элемент)
	
	ЭлементыОтбора = ДоступныеФормы.Отбор;
	
	ОтборСостояние = Неопределено;
	ПолеОтбора = Новый ПолеКомпоновкиДанных("Состояние");
	
	Для Каждого Элемент из ЭлементыОтбора.Элементы Цикл
		Если Элемент.ЛевоеЗначение = ПолеОтбора Тогда
			ОтборСостояние = Элемент;
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	
	Если ОтборСостояние = Неопределено Тогда
		
		ОтборСостояние = ЭлементыОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборСостояние.ЛевоеЗначение = ПолеОтбора;
		ОтборСостояние.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		
	КонецЕсли;
	
    ОтборСостояние.Использование = ФлагТолькоГодные;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалПриИзменении(Элемент)
	
	РасчетОтклоненияРазмераМакета();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокОпераций()
	Элементы.ТипПечати.СписокВыбора.Очистить();
	Если Объект.НаправлениеПечати = ПредопределенноеЗначение("Перечисление.НаправлениеПечати.Прямая") Тогда
		Элементы.ТипПечати.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.мн_КоличествоОпераций.ПрямаяПечать"),"Печать ГП");
		Элементы.ТипПечати.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.мн_КоличествоОпераций.ПрямаяПечатьРезка"),"Печ-Рез");
		Элементы.ТипПечати.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.мн_КоличествоОпераций.ПрямаяПечатьЛаминацияРезка"),"Печ-Лам-Рез");
		Элементы.ТипПечати.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.мн_КоличествоОпераций.ПрямаяПечатьЛаминацияТиснениеРезка"),"Печ-Лам-Тс-Рез");		
	ИначеЕсли Объект.НаправлениеПечати = ПредопределенноеЗначение("Перечисление.НаправлениеПечати.Обратная") Тогда
		Элементы.ТипПечати.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.мн_КоличествоОпераций.ОбратнаяПечатьЛаминация"),"Печ-Лам");
		Элементы.ТипПечати.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.мн_КоличествоОпераций.ОбратнаяПечатьЛаминацяРезка"),"Печ-Лам-Рез");
		Элементы.ТипПечати.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.мн_КоличествоОпераций.Обратная2ЛаминацииРезка"),"Печ-Лам-Лам-Рез");		
	КонецЕсли;	

КонецПроцедуры // ЗаполнитьСписокОпераций()

&НаСервереБезКонтекста
Функция ПолучитьСухойОстаток(Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, 0) КАК СухойОстаток
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Объект = &Объект
		|	И ЗначенияСвойствОбъектов.Свойство = &Свойство";
	
	Запрос.УстановитьПараметр("Объект", Номенклатура);
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("ЦБ000000015"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.СухойОстаток;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции // ПолучитьСухойОстаток()

&НаСервере
Процедура ЗаполнитьКолонкуСухойОстаток()
	
	СухойОстаток = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("ЦБ000000015");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мн_ДизайныКлишеЛицо.Номенклатура
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	Справочник.мн_Дизайны.КлишеЛицо КАК мн_ДизайныКлишеЛицо
		|ГДЕ
		|	мн_ДизайныКлишеЛицо.Ссылка = &Ссылка
		|	И мн_ДизайныКлишеЛицо.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	мн_ДизайныКлишеОборот.Номенклатура
		|ИЗ
		|	Справочник.мн_Дизайны.КлишеОборот КАК мн_ДизайныКлишеОборот
		|ГДЕ
		|	мн_ДизайныКлишеОборот.Ссылка = &Ссылка
		|	И мн_ДизайныКлишеОборот.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.Номенклатура,
		|	ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, 0) КАК СухойОстаток
		|ИЗ
		|	ВТ КАК ВТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО ВТ.Номенклатура = ЗначенияСвойствОбъектов.Объект
		|			И (ЗначенияСвойствОбъектов.Свойство = &СухойОстаток)";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("СухойОстаток", СухойОстаток);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();	
	
	Для каждого Стр  из Объект.КлишеЛицо Цикл
		Если ЗначениеЗаполнено(Стр.Номенклатура) Тогда
			Выборка.Сбросить();
			Пока Выборка.Следующий() Цикл
				Если Стр.Номенклатура = Выборка.Номенклатура Тогда
					Стр.СухойОстаток = Выборка.СухойОстаток;	
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Стр  из Объект.КлишеОборот Цикл
		Если ЗначениеЗаполнено(Стр.Номенклатура) Тогда
			Выборка.Сбросить();
			Пока Выборка.Следующий() Цикл
				Если Стр.Номенклатура = Выборка.Номенклатура Тогда
					Стр.СухойОстаток = Выборка.СухойОстаток;	
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьКолонкуСухойОстаток()

#КонецОбласти

//!!------------СХЕМЫ НАКЛЕЙКИ И НАМОТКИ------------------
#Область Картинки

&НаКлиенте
Процедура ТекстПослеПечати()
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипПечати) Тогда
		Объект.СхемаНаклейкиТекстПослеПечати = "";
	Иначе 
		Объект.СхемаНаклейкиТекстПослеПечати = мнДизайны.ТекстПослеПечати(Объект.ТипПечати,Объект.СхемаНамотки,Объект.ЛицоОборот);
	КонецЕсли;
	
	УстановитьКартинкуТекстПослеПечати();
	
КонецПроцедуры // СхемаНаклейкиМетка()

&НаКлиенте
Процедура УстановитьСхемуНаклейки()

	Если НЕ ЗначениеЗаполнено(Объект.ТипПечати)Тогда
		Объект.СхемаНаклейки = "";
	Иначе 
		Если ЗначениеЗаполнено(Объект.СхемаНамотки) Тогда
			Объект.СхемаНаклейки = мнДизайны.УстановитьСхемуНаклейки(Объект.ТипПечати,Объект.СхемаНамотки);
		Иначе
			Объект.СхемаНаклейки = мнДизайны.УстановитьСхемуНаклейки(Объект.ТипПечати,Объект.ЛицоОборот);
		КонецЕсли;
			
	КонецЕсли;
	
	УстановитьКартинкуСхемаНаклейкиНаГильзу();
	
КонецПроцедуры // УстановитьСхемуНаклейки()

&НаКлиенте
Процедура УстановитьСхемуНаклейкиМетки()
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипПечати) Тогда
		Объект.СхемаНаклейкиМетка = "";
	Иначе 
		Объект.СхемаНаклейкиМетка = мнДизайны.УстановитьНаклейкаМетки(Объект.ТипПечати,Объект.РасположениеМетки);
	КонецЕсли;
	
	УстановитьКартинкуСхемаНаклейкиМетка();
	
КонецПроцедуры // СхемаНаклейкиМетка()

&НаКлиенте
Процедура УстановитьКартинкуСхемаНаклейкиНаГильзу()
	
	Элементы.ДекорацияСхемаНаклейкиНаГильзу.Картинка = мнДизайны.ПолучитьКартинкуСхемаНаклейки(Объект.СхемаНаклейки);
	
КонецПроцедуры //УстановитьКартинкуСхемаНамотки()

&НаКлиенте
Процедура УстановитьКартинкуСхемаНаклейкиМетка()
	
	Картинка = мнДизайны.ПолучитьКартинкуРасположениеМетки(Объект.СхемаНаклейкиМетка);
	Элементы.ДекорацияРасположениеМетки.Картинка = Картинка;
	
КонецПроцедуры //УстановитьКартинкуСхемаНамотки()

&НаКлиенте
Процедура УстановитьКартинкуТекстПослеПечати()
	
	Элементы.ДекорацияТекстПослеПечати.Картинка =  мнДизайны.ПолучитьКартинкуТекстПослеПечати(Объект.СхемаНаклейкиТекстПослеПечати);
	
КонецПроцедуры //УстановитьКартинкуСхемаНамотки()

&НаКлиенте
Процедура УстановитьКартинкуРасположениеМетки()

	Элементы.ДекорацияМетка.Картинка = мнДизайны.ПолучитьКартинкуРасположениеМетки(Объект.РасположениеМетки);

КонецПроцедуры // УстановитьКартинкуМетки()

&НаКлиенте
Процедура УстановитьКартинкуСхемыНамотки()

	Элементы.ДекорацияСхема.Картинка = мнДизайны.ПолучитьКартинкуСхемыНамотки(Объект.СхемаНамотки);

КонецПроцедуры // УстановитьКартинкуСхемы()

&НаКлиенте
Процедура УстановитьКартинкуЛицаОборота()
	
	Элементы.ДекронацияЛицоОборот.Картинка = мнДизайны.ПолучитьКартинкуЛицоОборот(Объект.ЛицоОборот);

КонецПроцедуры // УстановитьИзображениеЛицаОборота()

&НаКлиенте
Процедура ВалНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.ФорматПечати = ПредопределенноеЗначение("Перечисление.ФорматПечати.Omet") Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ТолькоДоступные",ТолькоДоступныеВалы);
		ПараметрыОткрытия.Вставить("ШагПечати",Объект.ШагПечати);
		ПараметрыОткрытия.Вставить("ЗакрыватьПриВыборе",Истина);
		ПараметрыОткрытия.Вставить("РежимВыбора",Истина);
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			ОткрытьФормуМодально("Справочник.мн_Валы.Форма.ФормаПодбораВала",ПараметрыОткрытия,Элементы.Вал,Новый УникальныйИдентификатор);			
		#Иначе
			ОткрытьФорму("Справочник.мн_Валы.Форма.ФормаПодбораВала",ПараметрыОткрытия,Элементы.Вал,Новый УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		#КонецЕсли
	ИначеЕсли Объект.ФорматПечати = ПредопределенноеЗначение("Перечисление.ФорматПечати.Comexi") Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыОткрытия = Новый Структура;
		ОтборСтр = Новый Структура;
		ОтборСтр.Вставить("ФорматПечати", Объект.ФорматПечати);
   		Если ТолькоДоступныеВалы Тогда
			ОтборСтр.Вставить("НеДоступен", Ложь);
		КонецЕсли;		
		ПараметрыОткрытия.Вставить("Отбор",ОтборСтр);
		ПараметрыОткрытия.Вставить("ТекущаяСтрока",Объект.Вал);
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			ОткрытьФормуМодально("Справочник.мн_Валы.ФормаВыбора",ПараметрыОткрытия,Элемент,Новый УникальныйИдентификатор);
		#Иначе
			ОткрытьФорму("Справочник.мн_Валы.Форма.ФормаВыбора",ПараметрыОткрытия,Элементы.Вал,Новый УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДанныеФормыСтруктура") Тогда
		
		Объект.Вал = ВыбранноеЗначение.Ссылка;
		Объект.КоличествоНаРапорте = ВыбранноеЗначение.КоличествоРапортов;
		СтандартнаяОбработка = Ложь;	
		РасчетОтклоненияРазмераМакета();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШагПечати1ПриИзменении(Элемент)
	
	Если Объект.ФорматПечати = ПредопределенноеЗначение("Перечисление.ФорматПечати.Commexi") Тогда
		ПодобратьРапортВала();
	ИначеЕсли Объект.ФорматПечати = ПредопределенноеЗначение("Перечисление.ФорматПечати.Omet") Тогда
		ПодобратьРапортВалаУзкорулонка();
		РасчетОтклоненияРазмераМакета();		
	КонецЕсли;
	
	ЗаполнитьДлинуПечатиВала();
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеПечатиПриИзменении(Элемент)
	ЗаполнитьСписокОпераций();	
КонецПроцедуры

&НаКлиенте
Процедура ТипПечатиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//Элементы.ТипПечати.СписокВыбора.Очистить();
	////
	////Если Объект.НаправлениеПечати = ПредопределенноеЗначение("Перечисление.НаправлениеПечати.Прямая") Тогда
	////	Элементы.ТипПечати.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.мн_КоличествоОпераций.ПрямаяПечать"),"Печать ГП");
	////	Элементы.ТипПечати.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.мн_КоличествоОпераций.ПрямаяПечатьРезка"),"Печ-Резка");
	////	Элементы.ТипПечати.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.мн_КоличествоОпераций.ПрямаяПечатьЛаминацияРезка"),"Печ-Лам-Резка");
	////	Элементы.ТипПечати.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.мн_КоличествоОпераций.ПрямаяПечатьЛаминацияТиснениеРезка"),"Печ-Лам-Тс-Резка");		
	////ИначеЕсли Объект.НаправлениеПечати = ПредопределенноеЗначение("Перечисление.НаправлениеПечати.Обратная") Тогда
	////	Элементы.ТипПечати.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.мн_КоличествоОпераций.ОбратнаяПечатьЛаминация"),"Печ-Лам");
	////	Элементы.ТипПечати.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.мн_КоличествоОпераций.ОбратнаяПечатьЛаминацяРезка"),"Печ-Лам-Резка");
	////	Элементы.ТипПечати.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.мн_КоличествоОпераций.Обратная2ЛаминацииРезка"),"Печ-Лам-Лам-Резка");		
	////КонецЕсли;
	//
	//Если Объект.НаправлениеПечати = ПредопределенноеЗначение("Перечисление.НаправлениеПечати.Прямая") Тогда
	//	Элементы.ТипПечати.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.мн_КоличествоОпераций.ПрямаяПечать"),"Прямая (Печать ГП)");
	//	Элементы.ТипПечати.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.мн_КоличествоОпераций.ПрямаяПечатьРезка"),"Прямая (Печ-Рез)");
	//	Элементы.ТипПечати.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.мн_КоличествоОпераций.ПрямаяПечатьЛаминацияРезка"),"Прямая (Печ-Лам-Резка)");
	//	Элементы.ТипПечати.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.мн_КоличествоОпераций.ПрямаяПечатьЛаминацияТиснениеРезка"),"Печ-Лам-Тс-Резка");		
	//ИначеЕсли Объект.НаправлениеПечати = ПредопределенноеЗначение("Перечисление.НаправлениеПечати.Обратная") Тогда
	//	Элементы.ТипПечати.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.мн_КоличествоОпераций.ОбратнаяПечатьЛаминация"),"Печ-Лам");
	//	Элементы.ТипПечати.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.мн_КоличествоОпераций.ОбратнаяПечатьЛаминацяРезка"),"Печ-Лам-Рез");
	//	Элементы.ТипПечати.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.мн_КоличествоОпераций.Обратная2ЛаминацииРезка"),"Печ-Лам-Лам-Резка");		
	//КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВидыКлишеНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.КлишеЛицо.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура;
	Если НЕ ТекДанные = Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
			ПараметрыОткрытия.Вставить("ТекущаяСтрока", КаталогКарасок());	
		Иначе
			ПараметрыОткрытия.Вставить("ТекущаяСтрока", ТекДанные.Номенклатура);	
		КонецЕсли;
	КонецЕсли;
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыбораУправляемая",ПараметрыОткрытия,Элемент,Новый УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

//Функция возвращает каталог по умолчанию в справочнике номенклатуры
&НаСервереБезКонтекста
Функция КаталогКарасок()

	Возврат Справочники.Номенклатура.НайтиПоКоду("ЦБ000001461");

КонецФункции // КаталогКарасок()

&НаКлиенте
Процедура КомандаОбновитьДоступныеФормы(Команда)
	
	УстановитьОтборПечатныхФорм();
	
	Элементы.ДоступныеФормы.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСгруппироватьЦвета(Команда)
	
	ЭлементыГруппировки = ДоступныеФормы.Группировка.Элементы; 
	ПолеЦветКлише = Новый ПолеКомпоновкиДанных("ЦветКлише");
	ПолеГруппировки = Неопределено;
	
	Для каждого ЭлементГруппировки из ЭлементыГруппировки Цикл		
		Если ТипЗнч(ЭлементГруппировки) = Тип("ПолеГруппировкиКомпоновкиДанных") И
			ЭлементГруппировки.Поле = ПолеЦветКлише Тогда
			ПолеГруппировки = ЭлементГруппировки;
			Прервать;
		КонецЕсли;		
	КонецЦикла;
	
	Если ПолеГруппировки = Неопределено Тогда
		ПолеГруппировки = ЭлементыГруппировки.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Поле = ПолеЦветКлише;
		ПолеГруппировки.Использование = Истина;		
		//ПолеГруппировки.Пометка = Истина;
	Иначе 
		//ЭлементыГруппировки.Очистить();
		ПолеГруппировки.Использование = НЕ ПолеГруппировки.Использование;
	КонецЕсли;
	
	Элементы.КнопкаГруппироватьЦвета.Пометка = ПолеГруппировки.Использование;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерезаполнитьИД(Команда)
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ПерезполнитьИДСервер();	
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезполнитьИДСервер()

	Объект.ИД = Прав(СокрЛП(Объект.Владелец.Код),5)+"-"+ Объект.Код;

КонецПроцедуры // ПерезполнитьИДСервре()

&НаСервере
Процедура ЗаписатьКонтрагентаНаСервере()
	
	Контрагент = Объект.Владелец;
	НовыйКонтрагент = ВнешниеИсточникиДанных.InkMaker.Таблицы.dbo_tblCustomer.СоздатьОбъект();	
	
	НовыйКонтрагент.Address = "тест";
	НовыйКонтрагент.Telephone = "тест";
	
	НовыйКонтрагент.Code = Прав(Контрагент.Код,10); 
	НовыйКонтрагент.CompanyName = Контрагент.Наименование;
	//НовыйКонтрагент.IDCustomer = 2;
	НовыйКонтрагент.Записать();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьКонтрагента(Команда)	
//	ВнешниеИсточникиДанных.InkMaker.SyncJob_InsertOrUpdateDesign1(45,0,Объект.ИД,"N'"+Объект.НазваниеДизайна+"'","",1,"",0,1,0,0,2,Ложь,0,Объект.ДатаДизайна,Объект.ДатаИзменения,0,0,0);
КонецПроцедуры

&НаКлиенте
// Возвращает перекодированную строку из DOS в UTF8
// Аналогично и с дргими кодировками
Функция функDOS2UTF8(СтрокаDOS)
    ТекстUTF8 = Новый ТекстовыйДокумент;        
    ТекстUTF8.УстановитьТипФайла(КодировкаТекста.UTF8);// - вот это лишнее, т.к. по умолчанию у насUTF8    
    ТекстUTF8.УстановитьТекст(СтрокаDOS);
    Возврат ТекстUTF8.ПолучитьТекст();
КонецФункции // функDOS2UTF8

// Возвращает перекодированную строку
&НаКлиенте
Функция ПерекодироватьСтроку(СтрокаКодирования, Кодировка = "windows-1251") экспорт
    
    ТекстДляПерекодирования = Новый ТекстовыйДокумент;        
    ТекстДляПерекодирования.УстановитьТипФайла(Кодировка);
    ТекстДляПерекодирования.УстановитьТекст(СтрокаКодирования);
    
    Возврат ТекстДляПерекодирования.ПолучитьТекст();

КонецФункции // ПерекодироватьСтроку

&НаКлиенте
Процедура НомерКОНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Объект.НомерКО = Объект.ИД;
	
КонецПроцедуры

&НаКлиенте
Процедура КлишеЛицоПослеУдаления(Элемент)
	// Требуется обновить нумеруацию строк
КонецПроцедуры

&НаКлиенте
Процедура КлишеЛицоПередУдалением(Элемент, Отказ)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура КлишеЛицоОбработкаЗапросаОбновления()
	ЗаполнитьКолонкуСухойОстаток();
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ЗаполнитьКолонкуСухойОстаток();
	
	МетражПриладки = ПолучитьМетражПриладкиСервер(Объект.ФорматПечати,Объект.КолвоКлишеЛицо,Объект.УпрощеннаяПриладка);
	МетражПриладкиОборот = ПолучитьМетражПриладкиСервер(Объект.ФорматПечати,Объект.КолвоКлишеОборот,Объект.УпрощеннаяПриладка);
	
	
КонецПроцедуры

&НаКлиенте
Процедура КлишеОборотПослеУдаления(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры


#КонецОбласти
